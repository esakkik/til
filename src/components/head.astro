---
import "../styles/global.css";

import "@fontsource/ibm-plex-mono/latin-600.css";
import "@fontsource/ibm-plex-mono/latin-400.css";
import "@fontsource/ibm-plex-serif/latin-600.css";
import "@fontsource/ibm-plex-serif/latin-600.css";
import "@fontsource/ibm-plex-sans/latin-400.css";
import "@fontsource/ibm-plex-sans/latin-400.css";

import IBMMono400 from "@fontsource/ibm-plex-mono/files/ibm-plex-mono-latin-400-normal.woff2";
import IBMMono600 from "@fontsource/ibm-plex-mono/files/ibm-plex-mono-latin-600-normal.woff2";
import IBMSerif400 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-400-normal.woff2";
import IBMSerif600 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-600-normal.woff2";
// import IBMSans400 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-400-normal.woff2";
// import IBMSans600 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-600-normal.woff2";

import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const {
  title,
  description,
  image = `${import.meta.env.BASE_URL}favicon-light.svg`,
} = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  type="image/svg+xml"
  href={`${import.meta.env.BASE_URL}favicon-dark.svg`}
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href=`${import.meta.env.BASE_URL}favicon-light.svg`
  }
  media="(prefers-color-scheme: light)"
/>
<link
  rel="icon"
  type="image/x-icon"
  href=`${import.meta.env.BASE_URL}favicon-light.svg`
  }
/>

<!-- Font preloads -->
<link rel="preload" href={IBMMono400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={IBMMono600} as="font" type="font/woff2" crossorigin />
<link
  rel="preload"
  href={IBMSerif400}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={IBMSerif600}
  as="font"
  type="font/woff2"
  crossorigin
/>
<!-- <link rel="preload" href={IBMSans400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={IBMSans600} as="font" type="font/woff2" crossorigin /> -->

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />
<!-- <base href="{import.meta.env.BASE_URL}" /> -->

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" cont`ent={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]',
      ),
    ].forEach((link) => link.remove()),
  );
</script>

<script is:inline>
  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function themeInit() {
    preloadTheme();
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          setTheme(event.matches ? "dark" : "light");
        }
      });
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;
    if (!(userTheme === "light" || userTheme === "dark")) {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }
    setTheme(userTheme);
  }
  function setTheme(theme) {
    if (theme == "dark" || theme == "light")
      document.documentElement.setAttribute("data-theme", theme);
    else console.error("Theme not set it has to be light or dark");
  }

  document.addEventListener("DOMContentLoaded", () => {
    themeInit();
    animate();
  });
  document.addEventListener("astro:after-swap", () => {
    themeInit();
    animate();
  });
  preloadTheme();
</script>
